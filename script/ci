#!/usr/bin/env bash

RAILS_APP="app_for_ci"
TARGET_HOST="placeholder.example.com"

# Load RVM into a shell session *as a function*
if [[ -s "$HOME/.rvm/scripts/rvm" ]] ; then
  # First try to load from a user install
  source "$HOME/.rvm/scripts/rvm"
elif [[ -s "/usr/local/rvm/scripts/rvm" ]] ; then
  # Then try to load from a root install
  source "/usr/local/rvm/scripts/rvm"
else
  printf "ERROR: An RVM installation was not found.\n"
fi

# TODO: run the unit tests BEFORE building a new gem
# exit if any statement fails; must be set AFTER loading RVM
set -e

echo "Building new relevance_rails gem..."
rm -Rf relevance_rails-*.gem
gem build --verbose relevance_rails.gemspec 
echo "Done"

# NOTE: Manual install of just-built gem to workaround bundler wanting 
# it to live on rubygems.org. 
# NOTE: RVM 1.x doesn't work with "set -e", so you have to unset/set it.
set +e
rvm gemset create $RAILS_APP
rvm gemset use $RAILS_APP
set -e

if [ `gem list relevance_rails --installed` = "true" ]; then
  echo "Removing old relevance_rails gem..."
  gem uninstall --verbose --all --executables relevance_rails 
  echo "Done"
fi

echo "Installing relevance_rails gem into $RAILS_APP gemset..."
gem install relevance_rails-*.gem 
echo "Done."

rm -Rf ./$RAILS_APP
relevance_rails new $RAILS_APP --database=postgresql

# NOTE: this does NOT change the RVM gemset; we set it manually above
cd $RAILS_APP

echo "Generating relevance_rails deployment scripts..."
./script/rails generate deployment staging $TARGET_HOST
git add .
git commit -m "Generated relevance_rails deployment scripts."
echo "Done."

echo "Generating relevance_rails fixtures..."
./script/rails generate fixtures
git add .
git commit -m "Generated relevance_rails fixtures."
echo "Done."

