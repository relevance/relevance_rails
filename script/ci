#!/usr/bin/env bash

# TODO: will need to be able to override some of the ~/.relevance_rails/aws_config.yml
# especially around the starter AMI

# Load RVM into a shell session *as a function*
if [[ -s "$HOME/.rvm/scripts/rvm" ]] ; then
  # First try to load from a user install
  source "$HOME/.rvm/scripts/rvm"
elif [[ -s "/usr/local/rvm/scripts/rvm" ]] ; then
  # Then try to load from a root install
  source "/usr/local/rvm/scripts/rvm"
else
  printf "ERROR: An RVM installation was not found.\n"
fi

RAILS_APP="app_for_ci"

# exit if any statement fails (has to be AFTER rvm source)
#set -e

# TODO: run the unit tests BEFORE building a new gem

echo "Building new relevance_rails gem..."
rm -Rf relevance_rails-*.gem
gem build --verbose relevance_rails.gemspec 
echo "Done"

rvm gemset create $RAILS_APP
rvm gemset use $RAILS_APP
echo GEMSET: `rvm gemset name`

if [ `gem list relevance_rails --installed` = "true" ]; then
  echo "Removing old relevance_rails gem..."
  gem uninstall --verbose --all --executables relevance_rails 
  echo "Done"
fi

echo "Installing relevance_rails gem into $RAILS_APP gemset..."
gem install relevance_rails-*.gem 
echo "Done."

rm -Rf ./$RAILS_APP
relevance_rails new $RAILS_APP --database=postgresql

# TODO: this is NOT respecting the RVM gemset
cd $RAILS_APP

./script/rails generate deployment staging
git add .
git commit -m "Generated relevance_rails deployment scripts."

./script/rails generate fixtures
git add .
git commit -m "Generated relevance_rails fixtures."

