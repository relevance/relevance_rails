#!/bin/bash

# Function to sanity-check generators since Rails 3.x does not
# give a non-zero exist code if generators fail
function files_must_exist {
  for checked_file in "$@"; do
    if [ ! -e "$checked_file" ]; then
      echo "'$checked_file' didn't exist!"
      exit 1
    fi
  done
}

# Function to sanity-check generators since Rails 3.x does not
# give a non-zero exist code if generators fail
function files_must_NOT_exist {
  for checked_file in "$@"; do
    if [ -e "$checked_file" ]; then
      echo "'$checked_file' still exists!"
      exit 1
    fi
  done
}

RAILS_APP="app_for_ci"
TARGET_HOST="placeholder.example.com"

# Setup RVM
source "$HOME/.rvm/scripts/rvm"
rvm use "ruby-1.9.2@relevance_rails"

echo "DEBUG: using gemset: `rvm gemset name`"

# exit if any statement fails;
# must be set AFTER loading RVM
set -e

gem install bundler
bundle install
bundle exec rake spec

echo "Building new relevance_rails gem..."
rm -Rf relevance_rails-*.gem
gem build --verbose relevance_rails.gemspec
echo "Done"

# NOTE: Manual install of just-built gem to workaround bundler wanting
# it to live on rubygems.org.
# NOTE: RVM 1.x doesn't work with "set -e", so you have to unset/set it.
set +e
rvm --force gemset delete $RAILS_APP
rvm gemset create $RAILS_APP
rvm gemset use $RAILS_APP
set -e

if $(gem list relevance_rails --installed); then
  echo "Removing old relevance_rails gem..."
  gem uninstall --verbose --all --executables relevance_rails
  echo "Done"
fi

echo "Installing relevance_rails gem into $RAILS_APP gemset..."
gem install relevance_rails-*.gem
echo "Done."

rm -Rf ./$RAILS_APP
relevance_rails new $RAILS_APP --database=postgresql

# NOTE: this does NOT change the RVM gemset; we set it manually above
builtin cd $RAILS_APP

files_must_NOT_exist public/index.html
files_must_exist config/database.yml provision/dna.json config/deploy.rb config/deploy/recipes/deploy.rb

echo "Generating relevance_rails fixtures..."
./script/rails generate fixtures
git add .
git commit -m "Generated relevance_rails fixtures."
files_must_exist app/assets/javascripts/relevance_rails.js.coffee app/assets/stylesheets/relevance_rails.css.scss
echo "Done."

# rake provision:ec2 --> writes to config/ec2_instance.txt
# TARGET_HOST=something
#
# echo "Generating relevance_rails deployment scripts..."
# ./script/rails generate deployment staging $TARGET_HOST
# git add .
# git commit -m "Generated relevance_rails deployment scripts."
# files_must_exist config/deploy/staging.rb
# echo "Done."
#
# cap staging deploy:setup
# cap staging deploy:cold
#
# cd ..
#
# HOST=$TARGET_HOST rake acceptance

# IF failure, stop the instance
#cd $RAILS_APP; bundle exec rake provision:stop
#IF success, terminate the instance
#cd $RAILS_APP; bundle exec rake provision:terminate

